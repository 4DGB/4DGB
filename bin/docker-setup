#!/bin/bash

#
# Docker container setup script
#
# This will import a project from the mounted '/project' directory,
# build a release for it, then start up a server instance with gunicorn

########################
# CONSTANTS
########################

INPUTDIR=/project               # Bind-mounted to the host-machine by the user
BUILDDIR=/srv/projects/project  # Staging area when building releases
DESTDIR=/srv/release            # A persistent Docker volume to store the release

set -eu

########################
# HELPER FUNCTIONS
########################

# dir_is_empty DIR
# Check that a directory is empty
function dir_is_empty {
    [ -z "$(ls -A "$1")" ]
}

# dir_last_mod_time DIR
# Get the last-modified time of a directory and its subdirectories (in seconds since epoch)
function dir_last_mod_time {
    find -P "$1" -print0 | xargs -0 stat --format='%Y' | sort -n | tail -n 1
}

# do_task MESSAGE COMMAND [ARGS...]
# Wrapper around performing a particular task
# Prints a convenient message and displays the command
# in scroller(1) if its installed
function do_task {
    echo -e "\e[1m[\e[32m>\e[0m\e[1m]:\e[0m $1" >&2
    shift

    # Shell will re-interpret single-word commands
    if [ "$#" -eq "1" ] ; then
        set -- bash -c "$1"
    fi

    echo -e "\t\e[2;3m> $*\e[0m" >&2
    set -- scroller --size 20 --color '[2m' --on-exit 'error' --window flagpole-ascii "$@"

    if "$@" ; then
        return 0
    else
        echo -e "\e[1;91m[ERROR]:\e[0m Failed. (exit status: $?)" >&2
        return 1
    fi
}

# print_alert MESSAGE...
# Print a nicely-formatted alert message to stderr
function print_alert {
    echo -e "\e[1m[\e[93m!\e[0m\e[1m]:\e[0m $1" >&2
    shift
    while [ "$#" -gt 0 ] ; do
        echo -e " \e[1m|\e[0m  $1"
        shift
    done
}

function main {
    
    if [ "$BROWSERCONTAINER" != "yes" ] ; then
        print_alert "This script needs to be run inside the 4DGB Browser docker container"
        exit 1
    fi

    if dir_is_empty "$INPUTDIR" ; then
        print_alert "No files found in input!" \
            "Did you remember to mount a directory at $INPUTDIR" \
            "in the container?"
        exit 1
    fi

    mkdir -p "$BUILDDIR"

    # We only want to import and re-build if the input directory has had
    # changes made to it since last time
    if [ "$(dir_last_mod_time $INPUTDIR)" -gt "$(dir_last_mod_time "$DESTDIR")" ] \
       || dir_is_empty "$DESTDIR" ; 
    then
        do_task "Importing project..." rsync -hvrlt --delete "$INPUTDIR/" "$BUILDDIR/"

        if [ -x "$BUILDDIR/process-data" ] ; then
            ( cd "$BUILDDIR" && do_task "Pre-processing project data..." ./process-data )
        fi

        do_task "Generating database..." ./db_pop "$BUILDDIR"

        mkdir -p "$DESTDIR/server/static"

        do_task "Copying files..." "
            cp server/license.md \"$DESTDIR/\" \\
            && cp -r server/{gtkserver.py,gunicorn.conf.py,static} \"$DESTDIR/server/\" \\
            && cp -r \"$BUILDDIR\" \"$DESTDIR/server/static/\"
        "

        touch "$BUILDDIR"
    fi

    echo -e '
    \e[1m#
    \e[1m# \e[32mReady!\e[0m
    \e[1m# Open your web browser and visit: 
    \e[1m# http://localhost:8000/compare.html?gtkproject=project
    \e[1m#
    '

    # Start gunicorn
    cd $DESTDIR/server
    do_task "Starting server..." gunicorn --workers 4 gtkserver:app
}

main
